service: badge-api

frameworkVersion: '3'

plugins:
  - serverless-domain-manager
  - serverless-deployment-bucket
  - serverless-certificate-creator
  - serverless-finch
  - serverless-python-requirements

custom:
  customDomain:
    domainName: 2024-api.badge.bsidesroa.org
    certificateName: '2024-api.badge.bsidesroa.org'
    createRoute53IPv6Record: true
    createRoute53Record: true
    endpointType: 'regional'
    apiType: http
  customCertificate:
    certificateName: '2024-api.badge.bsidesroa.org'
    hostedZoneNames: 'badge.bsidesroa.org.'
    enabled: true
  client:
    bucketName: 2024badgesite
    errorDocument: 404.html
    distributionFolder: ../kiosk/dist/kiosk/browser
    objectHeaders:
      "*.js":
        - name: "Cache-Control"
          value: "max-age=15"
            #  - name: "Content-Type"
            #    value: "text/javascript"
      "*.json":
        - name: "Cache-Control"
          value: "max-age=15"
        - name: "Access-Control-Allow-Origin"
          value: '*'
        - name: "Access-Control-Allow-Credentials"
          value: 'True'
        - name: 'Access-Control-Allow-Headers'
          value: '*'
        - name: "Content-Type"
          value: "application/json"
  pythonRequirements:
    slim: true
      #pipCmdExtraArgs:
      #  - --platform arm64
    slimPatterns:
      - '**/*.egg-info*'

provider:
  name: aws
  endpointType: REGIONAL
  runtime: python3.12
  stage: dev
  memorySize: 512
  httpApi:
    cors: true
    #    allowedOrigins:
    #      - https://2024.badge.bsidesroa.org
    #    allowedHeaders:
    #      - Content-Type
    #      - Authorization
    #    maxAge: 6000
  timeout: 10
  architecture: arm64
  region: us-east-1
  deploymentBucket:
    serverSideEncryption: AES256
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:Get*"
            - "dynamodb:BatchGetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:Scan"
            - "sqs:SendMessage"
            - "sqs:GetQueueUrl"
            - "sqs:GetQueueAttributes"
            - "sqs:ReceiveMessage"
            - "sqs:DeleteMessage"
            - "sqs:GetQueueAttributes"
            - "s3:PutObject"
            - "s3:GetObject"
          Resource:
            - "arn:aws:dynamodb:us-east-1:*:table/users2024"
            - "arn:aws:dynamodb:us-east-1:*:table/badges2024"
            - "arn:aws:s3::*:2024badgesite/teams.json"
            - "arn:aws:s3::*:2024badgesite/scores.json"
            - "arn:aws:s3::*:2024badgesite/secret_scoreboard.csv"
            - "arn:aws:s3::*:bsidesbadgedump/*"
            - "arn:aws:sqs:us-east-1:<ACCOUNTNUMBER>:scoreboard2024"

  environment:
    webhook: "WEBHOOK"

package:
  patterns:
    - '!**'
    - handler.py
    - lib/*
    - secrets/*

functions:
  echo:
    handler: handler.echo
    events:
      - httpApi:
          path: /echo
          method: GET
            #mktoken:
            #  handler: handler.mk_token_test
            #  events:
            #    - httpApi:
            #        path: /mktoken
            #        method: GET
            #validatetoken:
            #  handler: handler.validate_token_route
            #  events:
            #    - httpApi:
            #        path: /validate
            #        method: GET
  dump:
    handler: handler.dump
    events:
      - httpApi:
          path: /dump
          method: POST
  changeUser:
    handler: handler.change_user
    events:
      - httpApi:
          path: /change_user_data
          method: POST
  getTeams:
    handler: handler.get_teams
    events:
      - schedule: rate(5 minutes)
  scoreboard2:
    handler: handler.update_scoreboard
    events:
       - sqs:
           arn: arn:aws:sqs:us-east-1:<ACCOUNTNUMBER>:scoreboard2024
           batchSize: 10
           maximumBatchingWindow: 5

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2


        #  scoreboard:
        #    handler: handler.score_points
        #    role: writerRole
        #    events:
        #       - sqs:
        #           arn: arn:aws:sqs:us-east-1:<ACCOUNTNUMBER>:scoreboard
        #           batchSize: 5
        #           maximumBatchingWindow: 20

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2


        #  scoreboard:
        #    handler: handler.score_points
        #    role: writerRole
        #    events:
        #       - sqs:
        #           arn: arn:aws:sqs:us-east-1:<ACCOUNTNUMBER>:scoreboard
        #           batchSize: 5
        #           maximumBatchingWindow: 20

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Parameters:
    HostedZone:
      Type: String
      Description: The DNS name of an existing Amazon Route 53 hosted zone
      AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
      ConstraintDescription: must be a valid DNS zone name.
      Default: "badge.bsidesroa.org"
  Resources:
    scoresQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: scoreboard2024
        SqsManagedSseEnabled: True
    #scoresTable:
    #  Type: AWS::DynamoDB::Table
    #  Properties:
    #    TableName: scores
    #    BillingMode: PAY_PER_REQUEST
    #    AttributeDefinitions:
    #      - AttributeName: token
    #        AttributeType: S
    #    KeySchema:
    #      - AttributeName: token
    #        KeyType: HASH
    #    TimeToLiveSpecification:
    #      AttributeName: ttl
    #      Enabled: True
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users2024
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: badge_id
            AttributeType: S
        KeySchema:
          - AttributeName: badge_id
            KeyType: HASH
    badgeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: badges2024
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: badge_id
            AttributeType: S
        KeySchema:
          - AttributeName: badge_id
            KeyType: HASH
    WebsiteDNSName:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: !Join ['', [!Ref 'HostedZone', .]]
        Comment: CNAME redirect custom name to CloudFront distribution
        Name: 2024.badge.bsidesroa.org
        Type: CNAME
        TTL: '20'
        ResourceRecords:
        - !GetAtt myDistribution.DomainName
    myDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: Cloudfront for HTTPS S3 hosting
          Origins:
          - DomainName: 2024badgesite.s3-website-us-east-1.amazonaws.com
            Id: badgepuzzle2024
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
          Enabled: 'true'
          DefaultRootObject: index.html
          Aliases:
          - 2024.badge.bsidesroa.org
          DefaultCacheBehavior:
            DefaultTTL: 20
            MaxTTL: 20
            AllowedMethods:
            - GET
            - HEAD
            TargetOriginId: badgepuzzle2024
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 5cc3b908-e619-4b99-88e5-2cf7f45965bd # CORS-With-Preflight
          PriceClass: PriceClass_100
          ViewerCertificate:
            MinimumProtocolVersion: TLSv1.2_2021
            SslSupportMethod: sni-only
            AcmCertificateArn:
              Ref: ACMCertificate
    ACMCertificate: 
      Type: "AWS::CertificateManager::Certificate"
      Properties: 
        DomainName: 2024.badge.bsidesroa.org
        CertificateTransparencyLoggingPreference: ENABLED
        DomainValidationOptions:
              - DomainName: 2024.badge.bsidesroa.org
                HostedZoneId: Z10177091GDIWN617ULSA
        ValidationMethod: DNS 
#    writerRole:
#      Type: AWS::IAM::Role
#      Properties:
#        Path: /sls/writer/
#        RoleName: writerRole
#        AssumeRolePolicyDocument:
#          Version: '2012-10-17'
#          Statement:
#            - Effect: Allow
#              Principal:
#                Service:
#                  - lambda.amazonaws.com
#              Action: sts:AssumeRole
#        Policies:
#          - PolicyName: writerRole
#            PolicyDocument:
#              Version: '2012-10-17'
#              Statement:
#                - Effect: Allow 
#                  Action:
#                    - logs:CreateLogGroup
#                    - logs:CreateLogStream
#                    - logs:PutLogEvents
#                    - "dynamodb:Put*"
#                    - "dynamodb:Scan"
#                    - "dynamodb:BatchWriteItem"
#                    - "s3:PutObject"
#                    - "dynamodb:Get*"
#                    - "dynamodb:BatchGetItem"
#                  Resource:
#                    - 'Fn::Join':
#                      - ':'
#                      -
#                        - 'arn:aws:logs'
#                        - Ref: 'AWS::Region'
#                        - Ref: 'AWS::AccountId'
#                        - 'log-group:/aws/lambda/*:*:*'
#                    - "arn:aws:dynamodb:us-east-1:*:table/scores"
#                    - "arn:aws:dynamodb:us-east-1:*:table/users"
#                    - "arn:aws:sqs:us-east-1:*:scoreboard"
#                    - "arn:aws:s3::*:badgepuzzle/scores.json"
